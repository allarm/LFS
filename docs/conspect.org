#+TITLE: Linux From Scratch Conspect

* 2 Preparing the host system
** 2.2 Host System Requirements

Vagrant snapshot: Initial

*** List

Bash-3.2 (/bin/sh should be a symbolic or hard link to bash)
Binutils-2.25 (Versions greater than 2.37 are not recommended as they have not been tested)
Bison-2.7 (/usr/bin/yacc should be a link to bison or small script that executes bison)
Bzip2-1.0.4
Coreutils-6.9
Diffutils-2.8.1
Findutils-4.2.31
Gawk-4.0.1 (/usr/bin/awk should be a link to gawk)
GCC-6.2 including the C++ compiler, g++ (Versions greater than 11.2.0 are not recommended as they have not been tested)
Glibc-2.11 (Versions greater than 2.34 are not recommended as they have not been tested)
Grep-2.5.1a
Gzip-1.3.12
Linux Kernel-3.2
The reason for the kernel version requirement is that we specify that version when building glibc in Chapter 5 and Chapter 8, at the recommendation of the developers. It is also required by udev.
If the host kernel is earlier than 3.2 you will need to replace the kernel with a more up to date version. There are two ways you can go about this. First, see if your Linux vendor provides a 3.2 or later kernel package. If so, you may wish to install it. If your vendor doesn't offer an acceptable kernel package, or you would prefer not to install it, you can compile a kernel yourself. Instructions for compiling the kernel and configuring the boot loader (assuming the host uses GRUB) are located in Chapter 10.
M4-1.4.10
Make-4.0
Patch-2.5.4
Perl-5.8.8
Python-3.4
Sed-4.1.5
Tar-1.22
Texinfo-4.7
Xz-5.0.0

*** Check script

#+begin_src sh
#!/bin/bash
# Simple script to list version numbers of critical development tools
export LC_ALL=C
bash --version | head -n1 | cut -d" " -f2-4
MYSH=$(readlink -f /bin/sh)
echo "/bin/sh -> $MYSH"
echo $MYSH | grep -q bash || echo "ERROR: /bin/sh does not point to bash"
unset MYSH

echo -n "Binutils: "; ld --version | head -n1 | cut -d" " -f3-
bison --version | head -n1

if [ -h /usr/bin/yacc ]; then
  echo "/usr/bin/yacc -> `readlink -f /usr/bin/yacc`";
elif [ -x /usr/bin/yacc ]; then
  echo yacc is `/usr/bin/yacc --version | head -n1`
else
  echo "yacc not found"
fi

bzip2 --version 2>&1 < /dev/null | head -n1 | cut -d" " -f1,6-
echo -n "Coreutils: "; chown --version | head -n1 | cut -d")" -f2
diff --version | head -n1
find --version | head -n1
gawk --version | head -n1

if [ -h /usr/bin/awk ]; then
  echo "/usr/bin/awk -> `readlink -f /usr/bin/awk`";
elif [ -x /usr/bin/awk ]; then
  echo awk is `/usr/bin/awk --version | head -n1`
else
  echo "awk not found"
fi

gcc --version | head -n1
g++ --version | head -n1
ldd --version | head -n1 | cut -d" " -f2-  # glibc version
grep --version | head -n1
gzip --version | head -n1
cat /proc/version
m4 --version | head -n1
make --version | head -n1
patch --version | head -n1
echo Perl `perl -V:version`
python3 --version
sed --version | head -n1
tar --version | head -n1
makeinfo --version | head -n1  # texinfo version
xz --version | head -n1

echo 'int main(){}' > dummy.c && g++ -o dummy dummy.c
if [ -x dummy ]
  then echo "g++ compilation OK";
  else echo "g++ compilation failed"; fi
rm -f dummy.c dummy
#+end_src

*** Update
**** Bash
** 2.4 Creating a New Partition

Вместо отрезания партиции от существующей я решил создать отдельный hdd в vagrant, как описано тут: https://everythingshouldbevirtual.com/virtualization/vagrant-adding-a-second-hard-drive/


#+begin_src ruby
disk = './secondDisk.vdi'
Vagrant.configure(2) do |config|
  config.vm.define "iscsitarget" do |iscsitarget|
    iscsitarget.vm.box = "ubuntu/trusty64"
    iscsitarget.vm.hostname = "iscsitarget"

    iscsitarget.vm.network :private_network, ip: "192.168.202.201"

    iscsitarget.vm.provider "virtualbox" do |vb|
      unless File.exist?(disk)
        vb.customize ['createhd', '--filename', disk, '--variant', 'Fixed', '--size', 30 * 1024]
      end
      vb.memory = "1024"
      vb.customize ['storageattach', :id,  '--storagectl', 'SATAController', '--port', 1, '--device', 0, '--type', 'hdd', '--medium', disk]
    end
  end
  config.vm.provision :shell, path: "provision.sh", keep_color: "true"
end
#+end_src

fdisk -l

Disk /dev/sdb: 10.7 GB, 10737418240 bytes
255 heads, 63 sectors/track, 1305 cylinders, total 20971520 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x00000000

Disk /dev/sdb doesn't contain a valid partition table

I create 3 partitions:

    An "EFI" system partition 1M big (will eventually be /boot/efi)
    A "Linux Filesystem" partion 200M big (will eventually be /boot)
    A "Lunux Filesystem" partition with the rest of the disk (will eventually be /)

Recommendations for partitioning (RedHat): https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/installation_guide/s2-diskpartrecommend-x86

- A swap partition ~ 2GB swap
- A /boot partition ~ 200MB ext4
- A / partition = 20GB
- A home partition
- A /boot/efi partition (EFI System Partition) - only on systems with UEFI firmware


Утилиты для нарезки партишнов:

- fdisk
- cfdisk (curses fdisk)
- sfdisk (script version)
- parted
Partition Table for /dev/sdb

:raw:
         ---Starting----      ----Ending-----    Start     Number of
 # Flags Head Sect  Cyl   ID  Head Sect  Cyl     Sector    Sectors
-- ----- ---- ---- ----- ---- ---- ---- ----- ----------- -----------
 1  0x00    1    1     0 0x82  254   63   242          63     3903732
 2  0x00    0    1   243 0x83  254   63   266     3903795      385560
 3  0x00    0    1   267 0x83  254   63  2698     4289355    39070080
 4  0x00    0    1  2699 0x05   63   51  3916    43359435    19555125
 5  0x00    1    1  2699 0x83   63   51  3916          63    19555062
:end:


Generate sfdisk empty input:

# sfdisk -d /dev/sdb
# partition table of /dev/sdb
unit: sectors

/dev/sdb1 : start=        0, size=        0, Id= 0
/dev/sdb2 : start=        0, size=        0, Id= 0
/dev/sdb3 : start=        0, size=        0, Id= 0
/dev/sdb4 : start=        0, size=        0, Id= 0


Actual partition table:

# sfdisk -d /dev/sdb
# partition table of /dev/sdb
unit: sectors

/dev/sdb1 : start=       63, size=  3903732, Id=82
/dev/sdb2 : start=  3903795, size=   385560, Id=83
/dev/sdb3 : start=  4289355, size= 39070080, Id=83
/dev/sdb4 : start= 43359435, size= 19555125, Id=83

- /sdb1 :: swap
- /sdb2 :: /boot
- /sdb3 :: /
- /sdb4 :: /home

** 2.5 Creating a File System on the Partition

#+begin_src sh
sudo mkswap /dev/sdb1
sudo mkfs -v -t ext4 /dev/sdb2
sudo mkfs -v -t ext4 /dev/sdb3
sudo mkfs -v -t ext4 /dev/sdb4
#+end_src

** 2.7 Mounting the New Partition

#+begin_src sh
sudo mkdir -pv $LFS
sudo mount -v -t ext4 /dev/sdb3 $LFS
sudo mkdir -v $LFS/swap
sudo mount -v -t swap /dev/sdb1 $LFS/swap
sudo mkdir -v $LFS/boot
sudo mount -v -t ext4 /dev/sdb2 $LFS/boot
sudo mkdir -v $LFS/home
sudo mount -v -t ext4 /dev/sdb4 $LFS/home
#+end_src
